
import os
import platform
import psutil
import requests
import threading
import pydivert
import time
import uuid
from scapy.all import sniff, IP, TCP  # Only for Linux packet interception

# Identify platform
IS_WINDOWS = platform.system().lower() == "windows"
IS_LINUX = platform.system().lower() == "linux"

# Generate a unique identifier for this agent using the MAC address
def get_mac_address():
    try:
        mac_address = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff)
                                for elements in range(0, 2 * 6, 8)][::-1])
        return mac_address
    except Exception as e:
        return f"Error: {str(e)}"

unique_id = uuid.uuid4()


if IS_WINDOWS:
	AGENT_ID = get_mac_address()
else:
	AGENT_ID = unique_id
SERVER_URL = "http://13.201.54.125:6600"
local_rules = {}  # Store local blocking rules fetched from the server

# Register agent with the central server
def register_with_server():
    try:
        response = requests.post(f"{SERVER_URL}/register", json={"agent_id": AGENT_ID})
        print(response.json())
    except requests.exceptions.RequestException as e:
        print(f"Error registering with server: {e}")

# Fetch blocking rules from the server
def fetch_rules():
    global local_rules
    while True:
        try:
            response = requests.get(f"{SERVER_URL}/rules/{AGENT_ID}")
            if response.status_code == 200:
                local_rules = response.json()
                print(f"Fetched rules: {local_rules}")
            else:
                print(f"Failed to fetch rules: {response.json()}")
        except requests.exceptions.RequestException as e:
            print(f"Error fetching rules: {e}")
        time.sleep(10)

# Normalize process names for browsers
def normalize_process_name(process_name):
    process_name = process_name.lower()
    if "firefox" in process_name:
        return "firefox.exe" if IS_WINDOWS else "firefox"
    if "chrome" in process_name:
        return "chrome.exe" if IS_WINDOWS else "chrome"
    if "edge" in process_name or "msedge" in process_name:
        return "msedge.exe" if IS_WINDOWS else "microsoft-edge"
    return process_name  # Fallback to the original name

# Get process name by port (works for both Windows and Linux)
def get_process_by_port(port):
    try:
        for conn in psutil.net_connections(kind="tcp"):
            if conn.laddr.port == port:
                try:
                    process = psutil.Process(conn.pid)
                    return normalize_process_name(process.name())
                except psutil.NoSuchProcess:
                    return None
    except Exception as e:
        print(f"Error fetching process by port: {e}")
    return None


def block_traffic_windows():
    """
    Block traffic based on the fetched rules.
    """
    print("Starting traffic interception...")
    with pydivert.WinDivert("(tcp.DstPort == 80 or tcp.DstPort == 443) and tcp.PayloadLength > 0") as w:
        for packet in w:
            try:
                # Get the process name associated with the packet's source port
                process_name = get_process_by_port(packet.src_port)
                if not process_name:
                    w.send(packet)  # Forward if the process is unknown
                    continue

                # Check if there are rules for the process name (browser)
                for domain, browsers in local_rules.items():
                    if process_name in browsers:
                        if domain.encode() in packet.payload:
                            print(f"Blocked traffic to {domain} for {process_name}.")
                            break  # Drop the packet
                else:
                    w.send(packet)  # Forward non-blocked packets

            except Exception as e:
                print(f"Error: {e}")
                try:
                    w.send(packet)  # Ensure packets are forwarded on error
                except Exception as send_error:
                    print(f"Failed to send packet: {send_error}")

# Linux-specific traffic interception
def block_traffic_linux():
    print("Starting traffic interception on Linux...")

    def packet_handler(packet):
        if packet.haslayer(IP) and packet.haslayer(TCP):
            src_port = packet[TCP].sport
            process_name = get_process_by_port(src_port)
            if not process_name:
                return

            for domain, browsers in local_rules.items():
                if process_name in browsers and domain in str(packet[TCP].payload):
                    print(f"Blocked traffic to {domain} for {process_name}.")
                    return  # Drop the packet by not forwarding it

            # Forward non-blocked packets (Requires additional routing logic in production)

    # Sniff packets on all interfaces
    sniff(filter="tcp port 80 or tcp port 443", prn=packet_handler, store=0)

if __name__ == "__main__":
    try:
        register_with_server()
        threading.Thread(target=fetch_rules, daemon=True).start()

        if IS_WINDOWS:
            block_traffic_windows()
        elif IS_LINUX:
            block_traffic_linux()
        else:
            print("Unsupported platform.")
    except KeyboardInterrupt:
        print("Agent stopped.")
    except Exception as e:
        print(f"Unhandled error: {e}")
